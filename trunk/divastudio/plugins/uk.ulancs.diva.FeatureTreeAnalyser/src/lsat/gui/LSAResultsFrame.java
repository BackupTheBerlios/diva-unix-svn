/*
 * LSAResultsFrame.java
 *
 * Created on 20 December 2005, 17:16
 */

package lsat.gui;

import javax.swing.*;
import lsat.lsa.*;
import java.awt.*;
import java.util.*;
import lsat.structures.*;

/**
 *
 * @author  stone
 */
public class LSAResultsFrame extends javax.swing.JInternalFrame {
    
    private LSAResults theResults;
    private Project theProject;
    private TermListModel termModel;
    
    /** Creates new form LSAResultsFrame */
    public LSAResultsFrame(LSAResults theResults, Project theProject) {
        initComponents();
        
        this.theResults = theResults;
        this.theProject = theProject;
        this.termModel = new TermListModel(this.theResults);
        
        SpinnerNumberModel numModel = new SpinnerNumberModel(0, -1, 1, 0.05);
        jSpinnerThreshold.setModel(numModel);
        
        // populate source table
        //ChunkViewTableModel sourceTableModel = new ChunkViewTableModel(theResults.getAllChunks());
        ChunkViewTableModel sourceTableModel = new ChunkViewTableModel(theResults.getChunksBelongingToClass(DocumentBoundryList.ALLDOCUMENTS));
        sourceTable.setModel(sourceTableModel);
        sourceTable.setDefaultRenderer(Color.class, new ColorRenderer(true));
        sourceTable.setDefaultRenderer(lsat.gui.HighLightStruct.class, new HighLightRenderer(true));
        
        //populate equivalence table
        ChunkViewTableModel relatedTableModel = new ChunkViewTableModel(new ArrayList<ChunkAnalysisStruct>());
        relatedTable.setModel(relatedTableModel);
        relatedTable.setDefaultRenderer(Color.class, new ColorRenderer(true));        
        relatedTable.setDefaultRenderer(lsat.gui.HighLightStruct.class, new HighLightRenderer(true));
        
        // set column sizes
        setTableWidths();

        // a sizing fix - bloody swing
        Dimension currentSize = this.getSize();
        jScrollPaneNorthWest.setPreferredSize(new Dimension(0, (int)(currentSize.getHeight()/2)));

        termList.setModel(termModel);
        
        // populate the class selectors
        DefaultComboBoxModel classComboBoxModelSource = new DefaultComboBoxModel();
        DefaultComboBoxModel classComboBoxModelEquivalence = new DefaultComboBoxModel();
        
        classComboBoxModelSource.addElement("All");
        classComboBoxModelEquivalence.addElement("All");
        
        for(DocumentClass dc : theProject.getDocumentClassCollection())
        {
            classComboBoxModelSource.addElement(dc.getDescription());
            classComboBoxModelEquivalence.addElement(dc.getDescription());
        }
        
        sourceBox.setModel(classComboBoxModelSource);
        equivalenceBox.setModel(classComboBoxModelEquivalence);
        
    }

   
    private void setTableWidths()
    {
        sourceTable.getColumnModel().getColumn(0).setMinWidth(30);
        sourceTable.getColumnModel().getColumn(1).setMinWidth(30);
        sourceTable.getColumnModel().getColumn(2).setPreferredWidth(1000);;

        relatedTable.getColumnModel().getColumn(0).setMinWidth(30);
        relatedTable.getColumnModel().getColumn(1).setMinWidth(30);
        relatedTable.getColumnModel().getColumn(2).setPreferredWidth(1000);;
        
        
        //sourceTable.setDefaultRenderer(java.awt.Color.class, new ColorRenderer(true));
        //sourceTable.setDefaultRenderer(lsat.gui.HighLightStruct.class, new HighLightRenderer(true));
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jPanelThreshold = new javax.swing.JPanel();
        jPanelThresholdEast = new javax.swing.JPanel();
        jLabelSpinner = new javax.swing.JLabel();
        jSpinnerThreshold = new javax.swing.JSpinner();
        relatedChunksLabel = new javax.swing.JLabel();
        relatedChunksField = new javax.swing.JTextField();
        findUnsourcedButton = new javax.swing.JButton();
        jPanelCenterPanel = new javax.swing.JPanel();
        jPanelChunks = new javax.swing.JPanel();
        jPanelNorthWest = new javax.swing.JPanel();
        jScrollPaneNorthWest = new javax.swing.JScrollPane();
        sourceTable = new javax.swing.JTable();
        jPanelClassSelectorNorth = new javax.swing.JPanel();
        sourceClassLabel = new javax.swing.JLabel();
        sourceBox = new javax.swing.JComboBox();
        jPanelNorthEast = new javax.swing.JPanel();
        jScrollPaneSouthWest = new javax.swing.JScrollPane();
        sourceArea = new javax.swing.JTextArea();
        jPanelSouthWest = new javax.swing.JPanel();
        jPanelClassSelectorSouth = new javax.swing.JPanel();
        sortedByRelatednessToggleButton = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        equivalenceBox = new javax.swing.JComboBox();
        jScrollPaneNorthEast = new javax.swing.JScrollPane();
        relatedTable = new javax.swing.JTable();
        jPanelSouthEast = new javax.swing.JPanel();
        jScrollPaneSouthEast = new javax.swing.JScrollPane();
        equivalenceArea = new javax.swing.JTextArea();
        jPanelTerms = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        termList = new javax.swing.JList();
        termListButtonPanel = new javax.swing.JPanel();
        sortFreqButton = new javax.swing.JButton();
        sortCorpusButton = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("LSA Results");
        setVisible(true);
        jPanelThreshold.setLayout(new java.awt.BorderLayout());

        jLabelSpinner.setText("Threshold");
        jPanelThresholdEast.add(jLabelSpinner);

        jSpinnerThreshold.setPreferredSize(new java.awt.Dimension(80, 20));
        jPanelThresholdEast.add(jSpinnerThreshold);

        relatedChunksLabel.setText("# Related Chunks");
        jPanelThresholdEast.add(relatedChunksLabel);

        relatedChunksField.setText("0");
        relatedChunksField.setMinimumSize(new java.awt.Dimension(50, 19));
        relatedChunksField.setPreferredSize(new java.awt.Dimension(50, 19));
        jPanelThresholdEast.add(relatedChunksField);

        findUnsourcedButton.setText("Find unsourced");
        findUnsourcedButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                findUnsourcedButtonActionPerformed(evt);
            }
        });

        jPanelThresholdEast.add(findUnsourcedButton);

        jPanelThreshold.add(jPanelThresholdEast, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanelThreshold, java.awt.BorderLayout.NORTH);

        jPanelCenterPanel.setLayout(new java.awt.BorderLayout());

        jPanelChunks.setLayout(new java.awt.GridLayout(2, 2));

        jPanelNorthWest.setLayout(new java.awt.BorderLayout());

        jPanelNorthWest.setBorder(javax.swing.BorderFactory.createTitledBorder("Source"));
        jScrollPaneNorthWest.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        sourceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        sourceTable.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                sourceTableMouseClicked(evt);
            }
        });

        jScrollPaneNorthWest.setViewportView(sourceTable);

        jPanelNorthWest.add(jScrollPaneNorthWest, java.awt.BorderLayout.CENTER);

        jPanelClassSelectorNorth.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        sourceClassLabel.setText("Source class");
        jPanelClassSelectorNorth.add(sourceClassLabel);

        sourceBox.setPreferredSize(new java.awt.Dimension(100, 24));
        sourceBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                sourceBoxItemStateChanged(evt);
            }
        });
        sourceBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sourceBoxActionPerformed(evt);
            }
        });

        jPanelClassSelectorNorth.add(sourceBox);

        jPanelNorthWest.add(jPanelClassSelectorNorth, java.awt.BorderLayout.NORTH);

        jPanelChunks.add(jPanelNorthWest);

        jPanelNorthEast.setLayout(new java.awt.BorderLayout());

        jPanelNorthEast.setBorder(javax.swing.BorderFactory.createTitledBorder("Source chunk content"));
        jScrollPaneSouthWest.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneSouthWest.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        sourceArea.setLineWrap(true);
        sourceArea.setWrapStyleWord(true);
        jScrollPaneSouthWest.setViewportView(sourceArea);

        jPanelNorthEast.add(jScrollPaneSouthWest, java.awt.BorderLayout.CENTER);

        jPanelChunks.add(jPanelNorthEast);

        jPanelSouthWest.setLayout(new java.awt.BorderLayout());

        jPanelSouthWest.setBorder(javax.swing.BorderFactory.createTitledBorder("Related"));
        jPanelClassSelectorSouth.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        sortedByRelatednessToggleButton.setText("Sorted By Relatedness");
        jPanelClassSelectorSouth.add(sortedByRelatednessToggleButton);

        jLabel2.setText("Related Class");
        jPanelClassSelectorSouth.add(jLabel2);

        equivalenceBox.setPreferredSize(new java.awt.Dimension(100, 24));
        equivalenceBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                equivalenceBoxActionPerformed(evt);
            }
        });
        equivalenceBox.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                equivalenceBoxMouseClicked(evt);
            }
        });

        jPanelClassSelectorSouth.add(equivalenceBox);

        jPanelSouthWest.add(jPanelClassSelectorSouth, java.awt.BorderLayout.NORTH);

        jScrollPaneNorthEast.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPaneNorthEast.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jScrollPaneNorthEastMouseClicked(evt);
            }
        });

        relatedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        relatedTable.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                relatedTableMouseClicked(evt);
            }
        });

        jScrollPaneNorthEast.setViewportView(relatedTable);

        jPanelSouthWest.add(jScrollPaneNorthEast, java.awt.BorderLayout.CENTER);

        jPanelChunks.add(jPanelSouthWest);

        jPanelSouthEast.setLayout(new java.awt.BorderLayout());

        jPanelSouthEast.setBorder(javax.swing.BorderFactory.createTitledBorder("Related chunk content"));
        jScrollPaneSouthEast.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneSouthEast.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        equivalenceArea.setLineWrap(true);
        equivalenceArea.setWrapStyleWord(true);
        jScrollPaneSouthEast.setViewportView(equivalenceArea);

        jPanelSouthEast.add(jScrollPaneSouthEast, java.awt.BorderLayout.CENTER);

        jPanelChunks.add(jPanelSouthEast);

        jPanelCenterPanel.add(jPanelChunks, java.awt.BorderLayout.CENTER);

        jPanelTerms.setLayout(new java.awt.BorderLayout());

        jPanelTerms.setBorder(javax.swing.BorderFactory.createTitledBorder("Term list"));
        termList.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                termListMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(termList);

        jPanelTerms.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        termListButtonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        sortFreqButton.setText("Sort by Frequency");
        sortFreqButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sortFreqButtonActionPerformed(evt);
            }
        });

        termListButtonPanel.add(sortFreqButton);

        sortCorpusButton.setText("Sort by Log-Likelihood");
        sortCorpusButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sortCorpusButtonActionPerformed(evt);
            }
        });

        termListButtonPanel.add(sortCorpusButton);

        jPanelTerms.add(termListButtonPanel, java.awt.BorderLayout.NORTH);

        jPanelCenterPanel.add(jPanelTerms, java.awt.BorderLayout.WEST);

        getContentPane().add(jPanelCenterPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findUnsourcedButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_findUnsourcedButtonActionPerformed
    {//GEN-HEADEREND:event_findUnsourcedButtonActionPerformed
        // action performed here for finding the badly sourced material
        double threshold = 0;
        int noRelatedChunks = 0;
        
        try
        {
            threshold = Double.valueOf(jSpinnerThreshold.getModel().getValue().toString());
            noRelatedChunks = Integer.valueOf(relatedChunksField.getText());
        }
        catch(NumberFormatException e)
        {
            // TODO : Add a log line here
            jSpinnerThreshold.getModel().setValue(0);
        }
        
        int selectedIndex = Integer.parseInt(sourceTable.getValueAt(sourceTable.getSelectedRow(), 0).toString());
        
        ArrayList<ChunkAnalysisStruct> results = theResults.getPoorlySourced(selectedIndex, theResults.WRTALLCHUNKS, threshold, noRelatedChunks);
        
        relatedTable.setModel(new ChunkViewTableModel(results));
        this.setTableWidths();
    }//GEN-LAST:event_findUnsourcedButtonActionPerformed

    private void termListMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_termListMouseClicked
    {//GEN-HEADEREND:event_termListMouseClicked
        // check for double click
        if(evt.getClickCount() == 2)
        {
            Term t = (Term)(termList.getSelectedValue());
            ChunkViewTableModel m = (ChunkViewTableModel)(sourceTable.getModel());
            termModel.highlightChunks(t, m);
        }
    }//GEN-LAST:event_termListMouseClicked

    private void sortCorpusButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sortCorpusButtonActionPerformed
    {//GEN-HEADEREND:event_sortCorpusButtonActionPerformed
        termModel.sortByLL();
    }//GEN-LAST:event_sortCorpusButtonActionPerformed

    private void sortFreqButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sortFreqButtonActionPerformed
    {//GEN-HEADEREND:event_sortFreqButtonActionPerformed
        termModel.sortByFrequency();
    }//GEN-LAST:event_sortFreqButtonActionPerformed

    private void sourceBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_sourceBoxItemStateChanged
    {//GEN-HEADEREND:event_sourceBoxItemStateChanged
        
    }//GEN-LAST:event_sourceBoxItemStateChanged

    private void sourceBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sourceBoxActionPerformed
    {//GEN-HEADEREND:event_sourceBoxActionPerformed
        // check what the user wants to see
        int selected = sourceBox.getSelectedIndex();
        if(selected == 0)
        {
            // populate with all data
            //sourceTable.setModel(new ChunkViewTableModel(theResults.getAllChunks()));
            sourceTable.setModel(new ChunkViewTableModel(theResults.getChunksBelongingToClass(DocumentBoundryList.ALLDOCUMENTS)));
        }
        else if (selected > 0)
        {
            // populate with selected data
            sourceTable.setModel(new ChunkViewTableModel(theResults.getChunksBelongingToClass(selected)));
        }
        setTableWidths();
    }//GEN-LAST:event_sourceBoxActionPerformed

    private void relatedTableMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_relatedTableMouseClicked
    {//GEN-HEADEREND:event_relatedTableMouseClicked
        int requiredChunk = Integer.valueOf(relatedTable.getModel().getValueAt(relatedTable.getSelectedRow(), 0).toString());        
        String newContent = theResults.getChunkAsText(requiredChunk);
        
        equivalenceArea.setText(newContent);
        equivalenceArea.setCaretPosition(0);
    }//GEN-LAST:event_relatedTableMouseClicked

    private void jScrollPaneNorthEastMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jScrollPaneNorthEastMouseClicked
    {//GEN-HEADEREND:event_jScrollPaneNorthEastMouseClicked
        
    }//GEN-LAST:event_jScrollPaneNorthEastMouseClicked

    private void sourceTableMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_sourceTableMouseClicked
    {//GEN-HEADEREND:event_sourceTableMouseClicked
        if(evt.getClickCount() == 2)
        {
            int selectedIndex = Integer.parseInt(sourceTable.getValueAt(sourceTable.getSelectedRow(), 0).toString());
            
            if(selectedIndex >= 0)
            {
                double threshold = 0;
                try
                {
                    threshold = Double.valueOf(jSpinnerThreshold.getModel().getValue().toString());
                }
                catch(NumberFormatException e)
                {
                    // TODO : Add a log line here
                    jSpinnerThreshold.getModel().setValue(0);
                }
                
                ArrayList<ChunkAnalysisStruct> related = new ArrayList<ChunkAnalysisStruct>();
                if(equivalenceBox.getSelectedIndex() > 0)
                {
                    related = theResults.getContributors(selectedIndex, 
                                threshold, equivalenceBox.getSelectedIndex(), sortedByRelatednessToggleButton.isSelected());
                    System.out.println("Asking for contributors to chunk " + selectedIndex);
                }
                else if(equivalenceBox.getSelectedIndex() == 0)
                {            
                    related = theResults.getContributorsFromAllClasses(selectedIndex,threshold);
                }
                
                ChunkViewTableModel t = new ChunkViewTableModel(related);
                relatedTable.setModel(t);
            }
            setTableWidths();    
        }
        
        
        
        //int requiredChunk = (Integer)sourceTable.getModel().getValueAt(sourceTable.getSelectedRow(), 0);
        int requiredChunk = Integer.valueOf(sourceTable.getModel().getValueAt(sourceTable.getSelectedRow(), 0).toString());
        sourceArea.setText(theResults.getChunkAsText(requiredChunk));
        sourceArea.setCaretPosition(0);
    }//GEN-LAST:event_sourceTableMouseClicked

    private void equivalenceBoxMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_equivalenceBoxMouseClicked
    {//GEN-HEADEREND:event_equivalenceBoxMouseClicked
// TODO add your handling code here:
    }//GEN-LAST:event_equivalenceBoxMouseClicked

    private void equivalenceBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_equivalenceBoxActionPerformed
    {//GEN-HEADEREND:event_equivalenceBoxActionPerformed
        // check what the user wants to see
        int selected = sourceBox.getSelectedIndex();
        if(selected == 0)
        {
            // populate with all data
            //relatedTable.setModel(new ChunkViewTableModel(theResults.getAllChunks()));
            relatedTable.setModel(new ChunkViewTableModel(theResults.getChunksBelongingToClass(DocumentBoundryList.ALLDOCUMENTS)));
        }
        else if (selected > 0)
        {
            // populate with selected data
            relatedTable.setModel(new ChunkViewTableModel(theResults.getChunksBelongingToClass(selected)));
        }
        setTableWidths();
    }//GEN-LAST:event_equivalenceBoxActionPerformed
    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea equivalenceArea;
    private javax.swing.JComboBox equivalenceBox;
    private javax.swing.JButton findUnsourcedButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelSpinner;
    private javax.swing.JPanel jPanelCenterPanel;
    private javax.swing.JPanel jPanelChunks;
    private javax.swing.JPanel jPanelClassSelectorNorth;
    private javax.swing.JPanel jPanelClassSelectorSouth;
    private javax.swing.JPanel jPanelNorthEast;
    private javax.swing.JPanel jPanelNorthWest;
    private javax.swing.JPanel jPanelSouthEast;
    private javax.swing.JPanel jPanelSouthWest;
    private javax.swing.JPanel jPanelTerms;
    private javax.swing.JPanel jPanelThreshold;
    private javax.swing.JPanel jPanelThresholdEast;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneNorthEast;
    private javax.swing.JScrollPane jScrollPaneNorthWest;
    private javax.swing.JScrollPane jScrollPaneSouthEast;
    private javax.swing.JScrollPane jScrollPaneSouthWest;
    private javax.swing.JSpinner jSpinnerThreshold;
    private javax.swing.JTextField relatedChunksField;
    private javax.swing.JLabel relatedChunksLabel;
    private javax.swing.JTable relatedTable;
    private javax.swing.JButton sortCorpusButton;
    private javax.swing.JButton sortFreqButton;
    private javax.swing.JToggleButton sortedByRelatednessToggleButton;
    private javax.swing.JTextArea sourceArea;
    private javax.swing.JComboBox sourceBox;
    private javax.swing.JLabel sourceClassLabel;
    private javax.swing.JTable sourceTable;
    private javax.swing.JList termList;
    private javax.swing.JPanel termListButtonPanel;
    // End of variables declaration//GEN-END:variables

}
